//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputManager/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""TankSystem"",
            ""id"": ""6b313499-9975-4e9c-bb85-36aa2f4ee0d8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8b2a4aa4-f8d9-4ee2-8e6e-baf18fe7491c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2b8cbe57-c3d2-40d6-aa85-aecf8074ec39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""9aab2053-01b9-45e7-847d-73f49dcbd986"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCannon"",
                    ""type"": ""Value"",
                    ""id"": ""b9cd3078-721f-49fa-a25b-e26399032ab6"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""1842e09a-aa28-4506-8751-87a16fa20fa6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7f62f991-27a3-49ff-9c56-a9eaabd1aac7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""356e55c8-8967-47bf-a49a-756bc51b86be"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6953be70-1a7d-414c-a36d-5d1a5af6044a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""id"": ""d50ed367-5ee0-4f80-bba6-ede44a10674b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""26632a6b-b4ab-406c-8e31-6b10c52e814f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ce84ca4b-e277-444d-ba04-d7d8155f7340"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d557ed0a-afd0-495a-99a5-3a80b4081958"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TankSystem
        m_TankSystem = asset.FindActionMap("TankSystem", throwIfNotFound: true);
        m_TankSystem_Move = m_TankSystem.FindAction("Move", throwIfNotFound: true);
        m_TankSystem_Shoot = m_TankSystem.FindAction("Shoot", throwIfNotFound: true);
        m_TankSystem_Rotate = m_TankSystem.FindAction("Rotate", throwIfNotFound: true);
        m_TankSystem_RotateCannon = m_TankSystem.FindAction("RotateCannon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankSystem
    private readonly InputActionMap m_TankSystem;
    private ITankSystemActions m_TankSystemActionsCallbackInterface;
    private readonly InputAction m_TankSystem_Move;
    private readonly InputAction m_TankSystem_Shoot;
    private readonly InputAction m_TankSystem_Rotate;
    private readonly InputAction m_TankSystem_RotateCannon;
    public struct TankSystemActions
    {
        private @InputManager m_Wrapper;
        public TankSystemActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TankSystem_Move;
        public InputAction @Shoot => m_Wrapper.m_TankSystem_Shoot;
        public InputAction @Rotate => m_Wrapper.m_TankSystem_Rotate;
        public InputAction @RotateCannon => m_Wrapper.m_TankSystem_RotateCannon;
        public InputActionMap Get() { return m_Wrapper.m_TankSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankSystemActions set) { return set.Get(); }
        public void SetCallbacks(ITankSystemActions instance)
        {
            if (m_Wrapper.m_TankSystemActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnShoot;
                @Rotate.started -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotate;
                @RotateCannon.started -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotateCannon;
                @RotateCannon.performed -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotateCannon;
                @RotateCannon.canceled -= m_Wrapper.m_TankSystemActionsCallbackInterface.OnRotateCannon;
            }
            m_Wrapper.m_TankSystemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @RotateCannon.started += instance.OnRotateCannon;
                @RotateCannon.performed += instance.OnRotateCannon;
                @RotateCannon.canceled += instance.OnRotateCannon;
            }
        }
    }
    public TankSystemActions @TankSystem => new TankSystemActions(this);
    public interface ITankSystemActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnRotateCannon(InputAction.CallbackContext context);
    }
}
